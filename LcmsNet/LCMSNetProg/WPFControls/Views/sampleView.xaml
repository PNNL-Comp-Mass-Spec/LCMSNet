<UserControl
    x:Class="LcmsNet.sampleView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:LcmsNet"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    d:DesignHeight="300"
    d:DesignWidth="600"
    mc:Ignorable="d">
    <Grid>
        <Grid.Resources>
            <BooleanToVisibilityConverter x:Key ="BoolToVis" />
        </Grid.Resources>
        <!-- The following is a dummy element to allow control over column visibility via the parent datacontext. -->
        <FrameworkElement x:Name="BaseDC" />
        <DataGrid AutoGenerateColumns="False" Name="SampleGrid" ItemsSource="{Binding Path=Samples}" CanUserResizeRows="False" CanUserSortColumns="False" CanUserDeleteRows="False" CanUserAddRows="False" SelectionMode="Extended">
            <DataGrid.InputBindings>
                <KeyBinding Key="Delete" Command="{Binding DataContext.RemoveSelectedCommand, Source={x:Reference BaseDC}}" />
            </DataGrid.InputBindings>
            <DataGrid.CellStyle>
                <Style TargetType="DataGridCell" >
                    <Setter Property="Background" Value="{Binding RowBackColor}" />
                    <Setter Property="BorderBrush" Value="{Binding RowBackColor}" />
                    <Setter Property="Foreground" Value="{Binding RowForeColor}" />
                    <Style.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="{Binding RowSelectionBackColor}" />
                            <Setter Property="BorderBrush" Value="{Binding RowSelectionBackColor}" />
                            <Setter Property="Foreground" Value="{Binding RowSelectionForeColor}" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.CellStyle>
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="X" MinWidth="25">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <CheckBox x:Name="Queued_Checkbox" IsChecked="{Binding IsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" IsEnabled="{Binding CheckboxEnabled}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn x:Name="Status" Header="Status" Width="54" Binding="{Binding Status}" IsReadOnly="True" >
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell" >
                            <Setter Property="ToolTip" Value="{Binding StatusToolTipText}" />
                            <Setter Property="Background" Value="{Binding RowBackColor}" />
                            <Setter Property="BorderBrush" Value="{Binding RowBackColor}" />
                            <Setter Property="Foreground" Value="{Binding RowForeColor}" />
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{Binding RowSelectionBackColor}" />
                                    <Setter Property="BorderBrush" Value="{Binding RowSelectionBackColor}" />
                                    <Setter Property="Foreground" Value="{Binding RowSelectionForeColor}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <!-- Set the number format to always show 4 digits, with leading zeros -->
                <DataGridTextColumn x:Name="SequenceNumber" Header="Seq #" Width="51" MinWidth="10" Binding="{Binding SequenceNumber, StringFormat={}{0:0000}}" IsReadOnly="True" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock" >
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn x:Name="ColumnNumber" Header="Col #" Width="46" Binding="{Binding ColumnNumber}" IsReadOnly="True" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock" >
                            <Setter Property="HorizontalAlignment" Value="Center" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell" >
                            <Setter Property="Background" Value="{Binding ColumnNumberBgColor}" />
                            <Setter Property="BorderBrush" Value="{Binding ColumnNumberBgColor}" />
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridTextColumn x:Name="Block" Header="Block" Width="46" Binding="{Binding BlockNumber}" IsReadOnly="True" Visibility="{Binding DataContext.BlockColumnVisible, Source={x:Reference BaseDC}, Converter={StaticResource BoolToVis}}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock" >
                            <Setter Property="HorizontalAlignment" Value="Center" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn x:Name="RunOrder" Header="Run Order" Width="46" Binding="{Binding RunOrder}" IsReadOnly="True" Visibility="{Binding DataContext.RunOrderColumnVisible, Source={x:Reference BaseDC}, Converter={StaticResource BoolToVis}}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock" >
                            <Setter Property="HorizontalAlignment" Value="Center" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
                <DataGridTextColumn x:Name="DatasetName" Header="Dataset Name" Width="*" Binding="{Binding RequestName}" >
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell" >
                            <Setter Property="IsEnabled" Value="{Binding EditAllowed}" />
                            <Setter Property="ToolTip" Value="{Binding RequestNameToolTipText}" />
                            <Setter Property="Background" Value="{Binding RequestNameBackColor}" />
                            <Setter Property="BorderBrush" Value="{Binding RequestNameBackColor}" />
                            <Setter Property="Foreground" Value="{Binding RowForeColor}" />
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{Binding RowSelectionBackColor}" />
                                    <Setter Property="BorderBrush" Value="{Binding RowSelectionBackColor}" />
                                    <Setter Property="Foreground" Value="{Binding RowSelectionForeColor}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <!-- <DataGridComboBoxColumn Header="PAL Tray" Width="66" MinWidth="10" SelectedValueBinding="{Binding PALTray, Mode=TwoWay}" ItemsSource="{Binding PalTrayComboBoxOptions}" /> -->
                <DataGridTemplateColumn Header="PAL Tray" Width="66" MinWidth="10" Visibility="{Binding DataContext.PalTrayColumnVisible, Source={x:Reference BaseDC}, Converter={StaticResource BoolToVis}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ComboBox x:Name="PALTraySelect" SelectedItem="{Binding PALTray, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding PalTrayComboBoxOptions}" IsEnabled="{Binding EditAllowed}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="PAL Vial" Width="50" Binding="{Binding PALVial}" Visibility="{Binding DataContext.PalVialColumnVisible, Source={x:Reference BaseDC}, Converter={StaticResource BoolToVis}}">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock" >
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell" >
                            <Setter Property="IsEnabled" Value="{Binding EditAllowed}" />
                            <Setter Property="Background" Value="{Binding RowBackColor}" />
                            <Setter Property="BorderBrush" Value="{Binding RowBackColor}" />
                            <Setter Property="Foreground" Value="{Binding RowForeColor}" />
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{Binding RowSelectionBackColor}" />
                                    <Setter Property="BorderBrush" Value="{Binding RowSelectionBackColor}" />
                                    <Setter Property="Foreground" Value="{Binding RowSelectionForeColor}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridTextColumn Header="Volume" Width="50" Binding="{Binding PALVolume}" Visibility="{Binding DataContext.VolumeColumnVisible, Source={x:Reference BaseDC}, Converter={StaticResource BoolToVis}}">
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock" >
                            <Setter Property="HorizontalAlignment" Value="Right" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell" >
                            <Setter Property="IsEnabled" Value="{Binding EditAllowed}" />
                            <Setter Property="Background" Value="{Binding RowBackColor}" />
                            <Setter Property="BorderBrush" Value="{Binding RowBackColor}" />
                            <Setter Property="Foreground" Value="{Binding RowForeColor}" />
                            <Style.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" Value="{Binding RowSelectionBackColor}" />
                                    <Setter Property="BorderBrush" Value="{Binding RowSelectionBackColor}" />
                                    <Setter Property="Foreground" Value="{Binding RowSelectionForeColor}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>
                <DataGridTemplateColumn Header="LC Method" Width="74" Visibility="{Binding DataContext.LcMethodColumnVisible, Source={x:Reference BaseDC}, Converter={StaticResource BoolToVis}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ComboBox x:Name="LCMethodSelect" SelectedItem="{Binding LCMethod, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" DisplayMemberPath="Name" ItemsSource="{Binding LcMethodComboBoxOptions}" IsEnabled="{Binding EditAllowed}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="Instrument Method" Width="74" Visibility="{Binding DataContext.InstrumentMethodColumnVisible, Source={x:Reference BaseDC}, Converter={StaticResource BoolToVis}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ComboBox x:Name="InstrumentMethodSelect" SelectedItem="{Binding InstrumentMethod, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" DisplayMemberPath="Name" ItemsSource="{Binding InstrumentMethodComboBoxOptions}" IsEnabled="{Binding EditAllowed}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="Dataset Type" Width="89" Visibility="{Binding DataContext.DatasetTypeColumnVisible, Source={x:Reference BaseDC}, Converter={StaticResource BoolToVis}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <ComboBox x:Name="DatasetTypeSelect" SelectedItem="{Binding DatasetType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ItemsSource="{Binding DatasetTypeComboBoxOptions}" IsEnabled="{Binding EditAllowed}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn x:Name="BatchID" Header="Batch ID" Width="46" Binding="{Binding BatchID}" IsReadOnly="True" Visibility="{Binding DataContext.BatchIdColumnVisible, Source={x:Reference BaseDC}, Converter={StaticResource BoolToVis}}" >
                    <DataGridTextColumn.ElementStyle>
                        <Style TargetType="TextBlock" >
                            <Setter Property="HorizontalAlignment" Value="Center" />
                        </Style>
                    </DataGridTextColumn.ElementStyle>
                </DataGridTextColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>
